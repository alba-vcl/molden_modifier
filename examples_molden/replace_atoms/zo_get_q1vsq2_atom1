#!/usr/bin/python
## S. H. Martinez, J.L. Cabellos and G. Merino
## CINVESTAV Merida
import sys
import os
import warnings
import numpy as np
import os.path
from math import *
#from data import atomic_numbers, chemical_symbols, atomic_masses
chemical_symbols = ['X',  'H',  'He', 'Li', 'Be',
                    'B',  'C',  'N',  'O',  'F',
                    'Ne', 'Na', 'Mg', 'Al', 'Si',
                    'P',  'S',  'Cl', 'Ar', 'K',
                    'Ca', 'Sc', 'Ti', 'V',  'Cr',
                    'Mn', 'Fe', 'Co', 'Ni', 'Cu',
                    'Zn', 'Ga', 'Ge', 'As', 'Se',
                    'Br', 'Kr', 'Rb', 'Sr', 'Y',
                    'Zr', 'Nb', 'Mo', 'Tc', 'Ru',
                    'Rh', 'Pd', 'Ag', 'Cd', 'In',
                    'Sn', 'Sb', 'Te', 'I',  'Xe',
                    'Cs', 'Ba', 'La', 'Ce', 'Pr',
                    'Nd', 'Pm', 'Sm', 'Eu', 'Gd',
                    'Tb', 'Dy', 'Ho', 'Er', 'Tm',
                    'Yb', 'Lu', 'Hf', 'Ta', 'W',
                    'Re', 'Os', 'Ir', 'Pt', 'Au',
                    'Hg', 'Tl', 'Pb', 'Bi', 'Po',
                    'At', 'Rn', 'Fr', 'Ra', 'Ac',
                    'Th', 'Pa', 'U',  'Np', 'Pu',
                    'Am', 'Cm', 'Bk', 'Cf', 'Es',
                    'Fm', 'Md', 'No', 'Lr']

atomic_numbers = {}
for Z, symbol in enumerate(chemical_symbols):
    atomic_numbers[symbol] = Z

atomic_names = [
    '', 'Hydrogen', 'Helium', 'Lithium', 'Beryllium', 'Boron',
    'Carbon', 'Nitrogen', 'Oxygen', 'Fluorine', 'Neon', 'Sodium',
    'Magnesium', 'Aluminium', 'Silicon', 'Phosphorus', 'Sulfur',
    'Chlorine', 'Argon', 'Potassium', 'Calcium', 'Scandium',
    'Titanium', 'Vanadium', 'Chromium', 'Manganese', 'Iron',
    'Cobalt', 'Nickel', 'Copper', 'Zinc', 'Gallium', 'Germanium',
    'Arsenic', 'Selenium', 'Bromine', 'Krypton', 'Rubidium',
    'Strontium', 'Yttrium', 'Zirconium', 'Niobium', 'Molybdenum',
    'Technetium', 'Ruthenium', 'Rhodium', 'Palladium', 'Silver',
    'Cadmium', 'Indium', 'Tin', 'Antimony', 'Tellurium',
    'Iodine', 'Xenon', 'Caesium', 'Barium', 'Lanthanum',
    'Cerium', 'Praseodymium', 'Neodymium', 'Promethium',
    'Samarium', 'Europium', 'Gadolinium', 'Terbium',
    'Dysprosium', 'Holmium', 'Erbium', 'Thulium', 'Ytterbium',
    'Lutetium', 'Hafnium', 'Tantalum', 'Tungsten', 'Rhenium',
    'Osmium', 'Iridium', 'Platinum', 'Gold', 'Mercury',
    'Thallium', 'Lead', 'Bismuth', 'Polonium', 'Astatine',
    'Radon', 'Francium', 'Radium', 'Actinium', 'Thorium',
    'Protactinium', 'Uranium', 'Neptunium', 'Plutonium',
    'Americium', 'Curium', 'Berkelium', 'Californium',
    'Einsteinium', 'Fermium', 'Mendelevium', 'Nobelium',
    'Lawrencium', 'Unnilquadium', 'Unnilpentium', 'Unnilhexium']

###
atomic_masses = np.array([
   0.00000, # X
   1.00794, # H  1
   4.00260, # He 2
   6.94100, # Li 3
   9.01218, # Be 4
  10.81100, # B  5
  12.01100, # C  6
  14.00670, # N  7
  15.99940, # O  8
  18.99840, # F  9
  20.17970, # Ne 10
  22.98977, # Na 11
  24.30500, # Mg 12
  26.98154, # Al 13
  28.08550, # Si 14
  30.97376, # P  15
  32.06600, # S  16
  35.45270, # Cl 17
  39.94800, # Ar 18
  39.09830, # K  19
  40.07800, # Ca 20
  44.95590, # Sc 21
  47.88000, # Ti 22
  50.94150, # V  23
  51.99600, # Cr 24
  54.93800, # Mn 25
  55.84700, # Fe 26
  58.93320, # Co 27
  58.69340, # Ni 28
  63.54600, # Cu 29
  65.39000, # Zn 30
  69.72300, # Ga 31
  72.61000, # Ge 32
  74.92160, # As 33
  78.96000, # Se 34
  79.90400, # Br 35
  83.80000, # Kr 36
  85.46780, # Rb 37
  87.62000, # Sr 38
  88.90590, # Y  39
  91.22400, # Zr 40
  92.90640, # Nb 41
  95.94000, # Mo 41
  98.00000, # Tc 43  ## cabellos
 101.07000, # Ru 44
 102.90550, # Rh 45
 106.42000, # Pd 46
 107.86800, # Ag 47
 112.41000, # Cd 48
 114.82000, # In 49
 118.71000, # Sn 50
 121.75700, # Sb 51
 127.60000, # Te 52
 126.90450, # I  53
 131.29000, # Xe 54
 132.90540, # Cs 55
 137.33000, # Ba 56
 138.90550, # La 57
 140.12000, # Ce 58
 140.90770, # Pr 59
 144.24000, # Nd 60
 145.00000, # Pm 61  ## cabellos
 150.36000, # Sm 62
 151.96500, # Eu 63
 157.25000, # Gd 64
 158.92530, # Tb 65
 162.50000, # Dy 66
 164.93030, # Ho 67
 167.26000, # Er 68
 168.93420, # Tm 69
 173.04000, # Yb 70
 174.96700, # Lu 71
 178.49000, # Hf 72
 180.94790, # Ta 73
 183.85000, # W  74
 186.20700, # Re 75
 190.20000, # Os 76
 192.22000, # Ir 77
 195.08000, # Pt 78
 196.96650, # Au 79
 200.59000, # Hg 80
 204.38300, # Tl 81
 207.20000, # Pb 82
 208.98040, # Bi 83
 209.00000, # Po 84 ## cabellos
 210.00000, # At 85 ## cabellos
 222.00000, # Rn 86 ## cabellos
 223.00000, # Fr 87 ## cabellos
 226.02540, # Ra 88
 227.00000, # Ac 89 ## cabellos
 232.03810, # Th 90
 231.03590, # Pa 91
 238.02900, # U  92
 237.04820, # Np 93
 244.00000, # Pu 94 ##  cabellos
 243.00000, # Am 95 ## cabellos
 247.00000, # Cm 96 ## cabellos
 247.00000, # Bk 97 ## cabellos
 251.00000, # Cf 98 ## cabellos
 252.00000, # Es 99 ## cabellos
 257.00000, # Fm 100 ## ...hasta Uuo
 258.00000, # Md 101
 259.00000, # No 102
 262.00000, # Lr 103
 267.00000, # Rf 104
 268.00000, # Db 105
 271.00000, # Sg 106
 272.00000, # Bh 107
 270.00000, # Hs 108
 276.00000, # Mt 109
 281.00000, # Ds 110
 280.00000, # Rg 111
 285.00000, # Cn 112
 284.00000, # Uut 113
 289.00000, # Fl3 114
 288.00000, # Uup 115
 293.00000, # Lv  116
 294.00000, # Uus 117
 294.00000]) # Uuo] 118

# Covalent radii from:
#
#  Covalent radii revisited,

missing = 0.2
covalent_radii = np.array([
    missing,  # X
    0.31,  # H
    0.28,  # He
    1.28,  # Li
    0.96,  # Be
    0.84,  # B
    0.76,  # C
    0.71,  # N
    0.66,  # O
    0.57,  # F
    0.58,  # Ne
    1.66,  # Na
    1.41,  # Mg
    1.21,  # Al
    1.11,  # Si
    1.07,  # P
    1.05,  # S
    1.02,  # Cl
    1.06,  # Ar
    2.03,  # K
    1.76,  # Ca
    1.70,  # Sc
    1.60,  # Ti
    1.53,  # V
    1.39,  # Cr
    1.39,  # Mn
    1.32,  # Fe
    1.26,  # Co
    1.24,  # Ni
    1.32,  # Cu
    1.22,  # Zn
    1.22,  # Ga
    1.20,  # Ge
    1.19,  # As
    1.20,  # Se
    1.20,  # Br
    1.16,  # Kr
    2.20,  # Rb
    1.95,  # Sr
    1.90,  # Y
    1.75,  # Zr
    1.64,  # Nb
    1.54,  # Mo
    1.47,  # Tc
    1.46,  # Ru
    1.42,  # Rh
    1.39,  # Pd
    1.45,  # Ag
    1.44,  # Cd
    1.42,  # In
    1.39,  # Sn
    1.39,  # Sb
    1.38,  # Te
    1.39,  # I
    1.40,  # Xe
    2.44,  # Cs
    2.15,  # Ba
    2.07,  # La
    2.04,  # Ce
    2.03,  # Pr
    2.01,  # Nd
    1.99,  # Pm
    1.98,  # Sm
    1.98,  # Eu
    1.96,  # Gd
    1.94,  # Tb
    1.92,  # Dy
    1.92,  # Ho
    1.89,  # Er
    1.90,  # Tm
    1.87,  # Yb
    1.87,  # Lu
    1.75,  # Hf
    1.70,  # Ta
    1.62,  # W
    1.51,  # Re
    1.44,  # Os
    1.41,  # Ir
    1.36,  # Pt
    1.36,  # Au
    1.32,  # Hg
    1.45,  # Tl
    1.46,  # Pb
    1.48,  # Bi
    1.40,  # Po
    1.50,  # At
    1.50,  # Rn
    2.60,  # Fr
    2.21,  # Ra
    2.15,  # Ac
    2.06,  # Th
    2.00,  # Pa
    1.96,  # U
    1.90,  # Np
    1.87,  # Pu
    1.80,  # Am
    1.69,  # Cm
    missing,  # Bk
    missing,  # Cf
    missing,  # Es
    missing,  # Fm
    missing,  # Md
    missing,  # No
    missing,  # Lr
    ])

# This data is from Ashcroft and Mermin.
reference_states = [\
    None, #X
    {'symmetry': 'diatom', 'd': 0.74}, #H
    {'symmetry': 'atom'}, #He
    {'symmetry': 'bcc', 'a': 3.49}, #Li
    {'symmetry': 'hcp', 'c/a': 1.567, 'a': 2.29}, #Be
    {'symmetry': 'tetragonal', 'c/a': 0.576, 'a': 8.73}, #B
    {'symmetry': 'diamond', 'a': 3.57},#C
    {'symmetry': 'diatom', 'd': 1.10},#N
    {'symmetry': 'diatom', 'd': 1.21},#O
    {'symmetry': 'diatom', 'd': 1.42},#F
    {'symmetry': 'fcc', 'a': 4.43},#Ne
    {'symmetry': 'bcc', 'a': 4.23},#Na
    {'symmetry': 'hcp', 'c/a': 1.624, 'a': 3.21},#Mg
    {'symmetry': 'fcc', 'a': 4.05},#Al
    {'symmetry': 'diamond', 'a': 5.43},#Si
    {'symmetry': 'cubic', 'a': 7.17},#P
    {'symmetry': 'orthorhombic', 'c/a': 2.339, 'a': 10.47,'b/a': 1.229},#S
    {'symmetry': 'orthorhombic', 'c/a': 1.324, 'a': 6.24, 'b/a': 0.718},#Cl
    {'symmetry': 'fcc', 'a': 5.26},#Ar
    {'symmetry': 'bcc', 'a': 5.23},#K
    {'symmetry': 'fcc', 'a': 5.58},#Ca
    {'symmetry': 'hcp', 'c/a': 1.594, 'a': 3.31},#Sc
    {'symmetry': 'hcp', 'c/a': 1.588, 'a': 2.95},#Ti
    {'symmetry': 'bcc', 'a': 3.02},#V
    {'symmetry': 'bcc', 'a': 2.88},#Cr
    {'symmetry': 'cubic', 'a': 8.89},#Mn
    {'symmetry': 'bcc', 'a': 2.87},#Fe
    {'symmetry': 'hcp', 'c/a': 1.622, 'a': 2.51},#Co
    {'symmetry': 'fcc', 'a': 3.52},#Ni
    {'symmetry': 'fcc', 'a': 3.61},#Cu
    {'symmetry': 'hcp', 'c/a': 1.856, 'a': 2.66},#Zn
    {'symmetry': 'orthorhombic', 'c/a': 1.695, 'a': 4.51, 'b/a': 1.001},#Ga
    {'symmetry': 'diamond', 'a': 5.66},#Ge
    {'symmetry': 'rhombohedral', 'a': 4.13, 'alpha': 54.10},#As
    {'symmetry': 'hcp', 'c/a': 1.136, 'a': 4.36},#Se
    {'symmetry': 'orthorhombic', 'c/a': 1.307, 'a': 6.67, 'b/a': 0.672},#Br
    {'symmetry': 'fcc', 'a': 5.72},#Kr
    {'symmetry': 'bcc', 'a': 5.59},#Rb
    {'symmetry': 'fcc', 'a': 6.08},#Sr
    {'symmetry': 'hcp', 'c/a': 1.571, 'a': 3.65},#Y
    {'symmetry': 'hcp', 'c/a': 1.593, 'a': 3.23},#Zr
    {'symmetry': 'bcc', 'a': 3.30},#Nb
    {'symmetry': 'bcc', 'a': 3.15},#Mo
    {'symmetry': 'hcp', 'c/a': 1.604, 'a': 2.74},#Tc
    {'symmetry': 'hcp', 'c/a': 1.584, 'a': 2.70},#Ru
    {'symmetry': 'fcc', 'a': 3.80},#Rh
    {'symmetry': 'fcc', 'a': 3.89},#Pd
    {'symmetry': 'fcc', 'a': 4.09},#Ag
    {'symmetry': 'hcp', 'c/a': 1.886, 'a': 2.98},#Cd
    {'symmetry': 'tetragonal', 'c/a': 1.076, 'a': 4.59},#In
    {'symmetry': 'tetragonal', 'c/a': 0.546, 'a': 5.82},#Sn
    {'symmetry': 'rhombohedral', 'a': 4.51, 'alpha': 57.60},#Sb
    {'symmetry': 'hcp', 'c/a': 1.330, 'a': 4.45},#Te
    {'symmetry': 'orthorhombic', 'c/a': 1.347, 'a': 7.27, 'b/a': 0.659},#I
    {'symmetry': 'fcc', 'a': 6.20},#Xe
    {'symmetry': 'bcc', 'a': 6.05},#Cs
    {'symmetry': 'bcc', 'a': 5.02},#Ba
    {'symmetry': 'hcp', 'c/a': 1.619, 'a': 3.75},#La
    {'symmetry': 'fcc', 'a': 5.16},#Ce
    {'symmetry': 'hcp', 'c/a': 1.614, 'a': 3.67},#Pr
    {'symmetry': 'hcp', 'c/a': 1.614, 'a': 3.66},#Nd
    None,#Pm
    {'symmetry': 'rhombohedral', 'a': 9.00, 'alpha': 23.13},#Sm
    {'symmetry': 'bcc', 'a': 4.61},#Eu
    {'symmetry': 'hcp', 'c/a': 1.588, 'a': 3.64},#Gd
    {'symmetry': 'hcp', 'c/a': 1.581, 'a': 3.60},#Th
    {'symmetry': 'hcp', 'c/a': 1.573, 'a': 3.59},#Dy
    {'symmetry': 'hcp', 'c/a': 1.570, 'a': 3.58},#Ho
    {'symmetry': 'hcp', 'c/a': 1.570, 'a': 3.56},#Er
    {'symmetry': 'hcp', 'c/a': 1.570, 'a': 3.54},#Tm
    {'symmetry': 'fcc', 'a': 5.49},#Yb
    {'symmetry': 'hcp', 'c/a': 1.585, 'a': 3.51},#Lu
    {'symmetry': 'hcp', 'c/a': 1.582, 'a': 3.20},#Hf
    {'symmetry': 'bcc', 'a': 3.31},#Ta
    {'symmetry': 'bcc', 'a': 3.16},#W
    {'symmetry': 'hcp', 'c/a': 1.615, 'a': 2.76},#Re
    {'symmetry': 'hcp', 'c/a': 1.579, 'a': 2.74},#Os
    {'symmetry': 'fcc', 'a': 3.84},#Ir
    {'symmetry': 'fcc', 'a': 3.92},#Pt
    {'symmetry': 'fcc', 'a': 4.08},#Au
    {'symmetry': 'rhombohedral', 'a': 2.99, 'alpha': 70.45},#Hg
    {'symmetry': 'hcp', 'c/a': 1.599, 'a': 3.46},#Tl
    {'symmetry': 'fcc', 'a': 4.95},#Pb
    {'symmetry': 'rhombohedral', 'a': 4.75, 'alpha': 57.14},#Bi
    {'symmetry': 'sc', 'a': 3.35},#Po
    None,#At
    None,#Rn
    None,#Fr
    None,#Ra
    {'symmetry': 'fcc', 'a': 5.31},#Ac
    {'symmetry': 'fcc', 'a': 5.08},#Th
    {'symmetry': 'tetragonal', 'c/a': 0.825, 'a': 3.92},#Pa
    {'symmetry': 'orthorhombic', 'c/a': 2.056, 'a': 2.85, 'b/a': 1.736},#U
    {'symmetry': 'orthorhombic', 'c/a': 1.411, 'a': 4.72, 'b/a': 1.035},#Np
    {'symmetry': 'monoclinic'},#Pu
    None,#Am
    None,#Cm
    None,#Bk
    None,#Cf
    None,#Es
    None,#Fm
    None,#Md
    None,#No
    None]#Lw

# http://www.webelements.com
ground_state_magnetic_moments = np.array([
   0.0, # X
   1.0, # H
   0.0, # He
   1.0, # Li
   0.0, # Be
   1.0, # B
   2.0, # C
   3.0, # N
   2.0, # O
   1.0, # F
   0.0, # Ne
   1.0, # Na
   0.0, # Mg
   1.0, # Al
   2.0, # Si
   3.0, # P
   2.0, # S
   1.0, # Cl
   0.0, # Ar
   1.0, # K
   0.0, # Ca
   1.0, # Sc
   2.0, # Ti
   3.0, # V
   6.0, # Cr
   5.0, # Mn
   4.0, # Fe
   3.0, # Co
   2.0, # Ni
   1.0, # Cu
   0.0, # Zn
   1.0, # Ga
   2.0, # Ge
   3.0, # As
   2.0, # Se
   1.0, # Br
   0.0, # Kr
   1.0, # Rb
   0.0, # Sr
   1.0, # Y
   2.0, # Zr
   5.0, # Nb
   6.0, # Mo
   5.0, # Tc
   4.0, # Ru
   3.0, # Rh
   0.0, # Pd
   1.0, # Ag
   0.0, # Cd
   1.0, # In
   2.0, # Sn
   3.0, # Sb
   2.0, # Te
   1.0, # I
   0.0, # Xe
   1.0, # Cs
   0.0, # Ba
   1.0, # La
   1.0, # Ce
   3.0, # Pr
   4.0, # Nd
   5.0, # Pm
   6.0, # Sm
   7.0, # Eu
   8.0, # Gd
   5.0, # Tb
   4.0, # Dy
   3.0, # Ho
   2.0, # Er
   1.0, # Tm
   0.0, # Yb
   1.0, # Lu
   2.0, # Hf
   3.0, # Ta
   4.0, # W
   5.0, # Re
   4.0, # Os
   3.0, # Ir
   2.0, # Pt
   1.0, # Au
   0.0, # Hg
   1.0, # Tl
   2.0, # Pb
   3.0, # Bi
   2.0, # Po
   1.0, # At
   0.0, # Rn
   1.0, # Fr
   0.0, # Ra
   1.0, # Ac
   2.0, # Th
   3.0, # Pa
   4.0, # U
   5.0, # Np
   6.0, # Pu
   7.0, # Am
   8.0, # Cm
   5.0, # Bk
   4.0, # Cf
   4.0, # Es
   2.0, # Fm
   1.0, # Md
   0.0, # No
np.nan])# Lw

def read_xyz(filename):
    xyz = open(filename)
    nl=1
    molecule={}
    imol=0
    for line in xyz:
        readli=line.split()
        if nl == 3:
            nl=1
        if len(readli) == 1:
            n_atoms=int(line)
            imol=imol+1
            nl=nl+1
        if len(readli) == 2 or len(readli) == 0:
            nl=nl+1
            if len(readli) == 0:
                name="mo_"+(str(imol).zfill(5))
                energy=0.0
            if len(readli) == 2:
                energy,name=line.split()
        if len(readli) == 4:
            symbol,x,y,z=line.split()[:4]
            if is_number(symbol):
                symbol=get_chemical_symbols(int(symbol))

            symbol = symbol.lower().capitalize()
            molecule[imol,iatom,0]=symbol
            molecule[imol,iatom,1]=float(x)
            molecule[imol,iatom,2]=float(y)
            molecule[imol,iatom,3]=float(z)
            molecule[imol,0,4]=float(energy)
            molecule[imol,0,5]=name
            iatom=iatom+1
            molecule[imol,0,6]=iatom
        if nl == 3:
            iatom=0

    return molecule
### <><><><><><><><><><><><
### <><><><><><><><><><><><
### <><><><><><><><><><><><
def get_atomic_masses(sym):
    if is_number(sym):
        sym1=sym
    else:
        sym1=get_atomic_number(sym)
    for ii in range(0,len(atomic_masses)):
        if ii == sym1:
            atomic_mass=atomic_masses[ii]
            found=1
    if found == 0:
        print "Warrning : Atomic mass not found for Z=",sym1
        atomic_mass=1.011
    return atomic_mass

def get_center_of_mass(molecule):
    how_many_atoms={}
    for key in sorted(molecule.iterkeys()):
        how_many_atoms[key[0]]=key[1]
    total_molecules=len(how_many_atoms)
    for imol in range(1,total_molecules+1):
        xxm=0.0
        yym=0.0
        zzm=0.0
        xcom=0.0
        ycom=0.0
        zcom=0.0
        total_mass=0.0
        atoms_mass=0.0
        n_atoms=molecule[imol,0,6]
        energy=molecule[imol,0,4]
        name=molecule[imol,0,5]
        for iatoms in range(0,n_atoms):
            sym=molecule[imol,iatoms,0]
            xx=molecule[imol,iatoms,1]
            yy=molecule[imol,iatoms,2]
            zz=molecule[imol,iatoms,3]
            atoms_mass=get_atomic_masses(sym)
            total_mass=total_mass+atoms_mass
            xxm= xxm+(atoms_mass*xx)
            yym= yym+(atoms_mass*yy)
            zzm= zzm+(atoms_mass*zz)
        xcom=xxm/total_mass
        ycom=yym/total_mass
        zcom=zzm/total_mass
        ## mv to zero
        for iatoms in range(0,n_atoms):
            molecule[imol,iatoms,1]=molecule[imol,iatoms,1]-xcom
            molecule[imol,iatoms,2]=molecule[imol,iatoms,2]-ycom
            molecule[imol,iatoms,3]=molecule[imol,iatoms,3]-zcom
        #print xcom
        #print ycom
        #print zcom
        return molecule

def write_xyz(molecule,output):
    open_new = open(output,"w")
    how_many_atoms={}
    for key in sorted(molecule.iterkeys()):
        how_many_atoms[key[0]]=key[1]
    total_molecules=len(how_many_atoms)
    for imol in range(1,total_molecules+1):
        n_atoms=molecule[imol,0,6]
        energy=molecule[imol,0,4]
        name=molecule[imol,0,5]
        print >>open_new,"%-4d" % (n_atoms)
        print >>open_new,"%-16.9f %s %s" % (energy,"  ",name)
        for iatoms in range(0,n_atoms):
            sym=molecule[imol,iatoms,0]
            xx=molecule[imol,iatoms,1]
            yy=molecule[imol,iatoms,2]
            zz=molecule[imol,iatoms,3]
            print >>open_new,"%-2s %16.9f %16.9f %16.9f" % (sym,xx,yy,zz)
    open_new.close()
    print "Output = ",output

def get_cloro(molecule):
    how_many_atoms={}
    for key in sorted(molecule.iterkeys()):
        how_many_atoms[key[0]]=key[1]
    total_molecules=len(how_many_atoms)
    for imol in range(1,total_molecules+1):
        n_atoms=molecule[imol,0,6]
        energy=molecule[imol,0,4]
        name=molecule[imol,0,5]
        #print "%-4d" % (n_atoms)
        #print "%-16.9f %s %s" % (energy,"  ",name)
        indcl=0
        for iatoms in range(0,n_atoms):
            sym=molecule[imol,iatoms,0]
            if sym == "Au":
               indcl=iatoms
            xx=molecule[imol,iatoms,1]
            yy=molecule[imol,iatoms,2]
            zz=molecule[imol,iatoms,3]
            #print "%-2s %16.9f %16.9f %16.9f, %5d" % (sym,xx,yy,zz,indcl)
        sym0=molecule[imol,indcl,0]
        xx0=molecule[imol,indcl,1]
        yy0=molecule[imol,indcl,2]
        zz0=molecule[imol,indcl,3]
        dis_short=100.0
        r1=100.0
        inx=0
        ## the closet Hydrogen
        for iatoms in range(0,n_atoms):
            sym=molecule[imol,iatoms,0]
            if (iatoms != indcl) and (sym == "H"):
                xx=molecule[imol,iatoms,1]
                yy=molecule[imol,iatoms,2]
                zz=molecule[imol,iatoms,3]
                dis=(sqrt((xx0-xx)**2+(yy0-yy)**2+(zz0-zz)**2))
                if r1 > dis:
                   r1=dis
                   inx=iatoms
                #if dis_short > dis:
                #   dis_short=dis
                #   inx=iatoms
        #print  indcl,inx,dis_short
        ## the closet O
        xx1=molecule[imol,inx,1]
        yy1=molecule[imol,inx,2]
        zz1=molecule[imol,inx,3]
        dis_short2=100.0
        r2=100.0
        inx2=0
        for iatoms in range(0,n_atoms):
            sym=molecule[imol,iatoms,0]
            if (iatoms != inx) and (sym == "O") or (sym == "Cl") or (sym == "Ag"):
                xx=molecule[imol,iatoms,1]
                yy=molecule[imol,iatoms,2]
                zz=molecule[imol,iatoms,3]
                dis2=(sqrt((xx1-xx)**2+(yy1-yy)**2+(zz1-zz)**2))
                if r2 > dis2:
                   r2=dis2
                   inx2=iatoms
                #if dis_short2 > dis2:
                #   dis_short2=dis2
                #   inx2=iatoms
        q2=r1+r2
        q1=(r1-r2)/2.0
        #q2=dis_short+dis_short2
        #q1=(dis_short-dis_short2)/2.0

        #print  imol,indcl+1,inx+1,inx2+1,dis_short,dis_short2,q1,q2
        indx_cl=indcl+1
        indx_h=inx+1
        indx_o=inx2+1
        print "%-5d %-5d %-5d %-5d %-16.9f %-16.9f %-16.9f %-16.9f" % (imol,indx_cl,indx_h,indx_o,dis_short,dis_short2,q1,q2)


                #print dis,indcl,iatoms,sym0,sym
                #if dis <= 1.36:
                    #print imo  l, dis,indcl,iatoms,sym0,sym,name
                    #sname="cp ../"+name+" ."
                    #print sname

            #if iatoms != indcl:

    #open_new.close()
    #print "Output = ",output




def get_area(molecule):
    #open_new = open(output,"w")
    how_many_atoms={}
    for key in sorted(molecule.iterkeys()):
        how_many_atoms[key[0]]=key[1]
    total_molecules=len(how_many_atoms)
    for imol in range(1,total_molecules+1):
        n_atoms=molecule[imol,0,6]
        energy=molecule[imol,0,4]
        name=molecule[imol,0,5]
        #print >>open_new,"%-4d" % (n_atoms)
        #print >>open_new,"%-16.9f %s %s" % (energy,"  ",name)
        suma=0.0
        for iatoms in range(0,n_atoms):
            #print " what",(iatoms+1),n_atoms
            idx_a=0
            idx_b=0
            idx_c=0
            if (iatoms+1) > n_atoms-1:
                idx_a=iatoms
                idx_b=0
            if (iatoms+1) <= n_atoms-1:
                idx_a=iatoms
                idx_b=iatoms+1
            #
            xx_a=float(molecule[imol,idx_a,1])
            yy_a=float(molecule[imol,idx_a,2])
            zz_a=float(molecule[imol,idx_a,3])
            xx_b=float(molecule[imol,idx_b,1])
            yy_b=float(molecule[imol,idx_b,2])
            zz_b=float(molecule[imol,idx_b,3])
            xx_c=float(0.0)
            yy_c=float(0.0)
            zz_c=float(0.0)
            a=np.array([xx_a,yy_a,zz_a])
            b=np.array([xx_b,yy_b,zz_b])
            c=np.cross(a,b)
            area=np.linalg.norm(c)/2.0
            suma=suma+area
            print "Triangulo  [", idx_a, idx_b, "centro ]",area,suma
        print "Area total=",suma

def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        pass


def get_chemical_symbols(symb):
       found=0
       for ii in range(0,len(chemical_symbols)):
           symb1=chemical_symbols[ii]
           if ii == symb:
               symb2=symb1
               found=1
       if found == 0:
           print "Warrning : Symbol not found for Z=",symb
           symb2="C"
       return symb2



def get_atomic_number(symb):
       found=0
       for ii in range(0,len(chemical_symbols)):
           symb1=chemical_symbols[ii]
           if symb == symb1:
               symb2=ii
               found=1
       if found == 0:
           print "Warrning : Z not found for symbol=",symb
           symb2=1
       return symb2

def molecule_sort(molecule):
    molecule_tmp={}
    how_many_atoms={}
    for key in sorted(molecule.iterkeys()):
        how_many_atoms[key[0]]=key[1]
    total_molecules=len(how_many_atoms)


    for imol in range(1,total_molecules+1):
        n_atoms=molecule[imol,0,6]
        energy=molecule[imol,0,4]
        name=molecule[imol,0,5]
        molecule_tmp[imol,0,6]=molecule[imol,0,6]
        molecule_tmp[imol,0,4]=molecule[imol,0,4]
        molecule_tmp[imol,0,5]=molecule[imol,0,5]
        print "%-4d" % (n_atoms)
        print "%-16.9f %s %s" % (energy,"  ",name)
        A=[]
        B=[]
        C=[]
        D=[]
        for iatoms in range(0,n_atoms):
            sym=molecule[imol,iatoms,0]
            atomic_number=get_atomic_number(sym)
            xx=molecule[imol,iatoms,1]
            yy=molecule[imol,iatoms,2]
            zz=molecule[imol,iatoms,3]
            A.append(atomic_number)
            B.append(molecule[imol,iatoms,1])
            C.append(molecule[imol,iatoms,2])
            D.append(molecule[imol,iatoms,3])
            print "%-4d %16.9f %16.9f %16.9f" % (atomic_number,xx,yy,zz)
        A,B,C,D=bubblesort(A,B,C,D)
        for iatoms in range(0,n_atoms):
            symbol=get_chemical_symbols(int(A[iatoms]))
            molecule_tmp[imol,iatoms,0]=symbol
            molecule_tmp[imol,iatoms,1]=B[iatoms]
            molecule_tmp[imol,iatoms,2]=C[iatoms]
            molecule_tmp[imol,iatoms,3]=D[iatoms]
            xx= molecule_tmp[imol,iatoms,1]
            yy= molecule_tmp[imol,iatoms,2]
            zz= molecule_tmp[imol,iatoms,3]
            print "%-4s %16.9f %16.9f %16.9f" % (symbol,xx,yy,zz)
    return molecule_tmp


def bubblesort(A,B,C,D):
    for i in range( len( A ) ):
        for k in range( len( A ) - 1, i, -1 ):
            if ( A[k] < A[k - 1] ):
                tmp_a=A[k]
                A[k]=A[k-1]
                A[k-1]=tmp_a
                tmp_b=B[k]
                B[k]=B[k-1]
                B[k-1]=tmp_b
                tmp_c=C[k]
                C[k]=C[k-1]
                C[k-1]=tmp_c
                tmp_d=D[k]
                D[k]=D[k-1]
                D[k-1]=tmp_d

    return A,B,C,D

##### start code


args=sys.argv[1:]
if len(args) < 1:
    print " ",sys.argv[0], "  < *.molden >"
    exit()

molecule=read_xyz(sys.argv[1])
get_cloro(molecule)


#moleculea=get_center_of_mass(molecule)
#get_area(moleculea)
